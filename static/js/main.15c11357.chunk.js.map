{"version":3,"sources":["Pages/Feedback/index.js","Pages/Game/index.js","Pages/Game/helper.js","actions/index.js","Pages/Initial/index.js","Pages/Ranking/index.js","Pages/Settings/index.js","serviceWorker.js","reducer/login.js","reducer/score.js","reducer/index.js","store/index.js","index.js","App.js","trivia.png"],"names":["Feedback","this","props","dados","history","name","profile","score","assertions","className","data-testid","src","alt","type","onClick","push","Component","connect","state","scoreReducer","Game","questions","questionNumber","timer","loading","redBorder","greenBorder","disable","totalScore","showButton","answerStyle","answer","fetchQuestions","bind","renderAnswers","handleClick","stopWatch","switchValue","stopTimer","nextQuestion","switchTimeBar","gravatarEmail","email","localStorage","setItem","JSON","stringify","player","setInterval","setState","clearInterval","token","defaultToken","undefined","fetch","response","json","data","results","difficuty","target","difficulty","textContent","correct_answer","backdropFilter","backgroundColor","border","total","Score","ranking","getItem","rankingObj","parse","obj","picture","localHelper","answers","incorrect_answers","id","sort","map","disabled","key","style","width","Object","values","length","trivia","category","question","fontWeight","hidden","loginReducer","dispatch","payload","Initial","handleChange","sendLogin","validLogin","includes","split","every","error","value","md5","toString","stringToken","LoginAction","Login","autoComplete","onChange","placeholder","onKeyUp","to","Ranking","a","b","console","log","index","Settings","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","Cypress","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"qfAKMA,G,wLACM,IAAD,EACoBC,KAAKC,MAAxBC,EADD,EACCA,MAAOC,EADR,EACQA,QACPC,EAAqCF,EAArCE,KAAMC,EAA+BH,EAA/BG,QAASC,EAAsBJ,EAAtBI,MAAOC,EAAeL,EAAfK,WAC9B,OACE,6BAASC,UAAU,oBACjB,yBAAKA,UAAU,sBACb,gCACE,0BAAMC,cAAY,iBAAlB,YACA,uBAAGA,cAAY,sBAAuBL,GACtC,uBAAGK,cAAY,gBAAiBH,GAChC,uBAAGG,cAAY,wBAAyBH,GACxC,uBAAGG,cAAY,2BAA4BF,GAC3C,yBACEG,IAAG,0CAAsCL,GACzCM,IAAI,WACJF,cAAY,yBACZD,UAAU,kBAGVD,EAAa,EACT,uBAAGE,cAAY,iBAAf,eACA,uBAAGA,cAAY,iBAAf,wBAGR,4BACEG,KAAK,SACLH,cAAY,iBACZD,UAAU,iBACVK,QAAU,kBAAMV,EAAQW,KAAK,OAJ/B,mBAQA,4BACEF,KAAK,SACLH,cAAY,cACZD,UAAU,cACVK,QAAU,kBAAMV,EAAQW,KAAK,cAJ/B,qB,GAjCaC,cAmDRC,eAJS,SAACC,GAAD,MAAY,CAClCf,MAAOe,EAAMC,gBAGyB,KAAzBF,CAA+BjB,G,6DC9CxCoB,E,YACJ,aAAe,IAAD,8BACZ,+CACKF,MAAQ,CACXG,UAAW,GACXC,eAAgB,EAChBC,MAAO,GACPC,SAAS,EACTC,UAAW,GACXC,YAAa,GACbC,SAAS,EACTC,WAAY,EACZpB,WAAY,EACZqB,YAAY,EACZC,YAAa,GACbC,OAAQ,IAEV,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,UAAY,EAAKA,UAAUH,KAAf,gBACjB,EAAKI,YAAc,EAAKA,YAAYJ,KAAjB,gBACnB,EAAKK,UAAY,EAAKA,UAAUL,KAAf,gBACjB,EAAKM,aAAe,EAAKA,aAAaN,KAAlB,gBACpB,EAAKO,cAAgB,EAAKA,cAAcP,KAAnB,gBAvBT,E,iFA2BZhC,KAAK+B,iBACL/B,KAAKmC,YAFa,IAGVjC,EAAUF,KAAKC,MAAfC,MACAK,EAAeP,KAAKiB,MAApBV,WACFF,EAAU,CACdD,KAAMF,EAAME,KACZG,aACAD,MAAO,EACPkC,cAAetC,EAAMuC,OAEvBC,aAAaC,QAAQ,QAASC,KAAKC,UAAU,CAAEC,OAAQzC,O,kCAG5C,IAAD,OAEVL,KAAKsB,MAAQyB,aAAY,WAAO,IACtBzB,EAAU,EAAKL,MAAfK,MACR,EAAK0B,SAAS,CACZ1B,MAAOA,EAAQ,IAEH,IAAVA,IACF2B,cAAc,EAAK3B,OACnB,EAAK0B,SAAS,CACZtB,SAAS,EACTE,YAAY,OAVF,O,4HAiBCsB,EAAYlD,KAAKC,MAA1BC,MAASgD,MACXC,OAAyBC,IAAVF,EACjB,mEAAqEA,E,mBAClDG,MAAM,8CAAD,OAA+CF,K,cAArEG,E,0BACaA,EAASC,Q,OAAtBC,E,OACNxD,KAAKgD,SAAS,CACZ5B,UAAWoC,EAAKC,QAChBlC,SAAS,I,mFAIDmC,GAEV,OAAQA,GACR,IAAK,OACH,OAAO,EACT,IAAK,SACH,OAAO,EACT,IAAK,OACH,OAPiB,EAQnB,QACE,OAAO,K,sCAIM,IACPpC,EAAUtB,KAAKiB,MAAfK,MACR,OAAIA,EAAQ,IAAMA,EAAQ,GAAW,SACjCA,EAAQ,GAAW,MAChB,Y,kCAIPtB,KAAKgD,SAAS,CACZvB,YAAa,eACbD,UAAW,eAEbyB,cAAcjD,KAAKsB,S,qCAGI,IAAXqC,EAAU,EAAVA,OACZ3D,KAAKqC,YADiB,MAE+CrC,KAAKiB,MAAlEG,EAFc,EAEdA,UAAWC,EAFG,EAEHA,eAAgBC,EAFb,EAEaA,MAAOK,EAFpB,EAEoBA,WAAYpB,EAFhC,EAEgCA,WAC9CqD,EAAexC,EAAUC,GAAzBuC,WACA1D,EAAUF,KAAKC,MAAfC,MACR,GAAIyD,EAAOE,cAAgBzC,EAAUC,GAAgByC,eAAgB,CACnE,IAAMzD,EAAU,CACdD,KAAMF,EAAME,KACZG,aACAD,MAAOqB,EACPa,cAAetC,EAAMuC,OAavB,OAXAC,aAAaC,QAAQ,QAASC,KAAKC,UAAU,CAAEC,OAAQzC,UACvDL,KAAKgD,SAAS,CACZtB,SAAS,EACTE,YAAY,EACZE,OAAQV,EAAUC,GAAgByC,eAClCjC,YAAa,CACXkC,eAAgB,UAChBC,gBAAiB,GACjBC,OAAQ,mBAKd,IACMC,EADM,GACS5C,EAAQtB,KAAKoC,YAAYwB,GAC9C5D,KAAKgD,SAAS,CACZtB,SAAS,EACTC,WAAYA,EAAauC,EACzB3D,WAAYA,EAAa,EACzBqB,YAAY,EACZE,OAAQV,EAAUC,GAAgByC,eAClCjC,YAAa,CACXkC,eAAgB,UAChBC,gBAAiB,GACjBC,OAAQ,qBAGZ,IAAM5D,EAAU,CACdD,KAAMF,EAAME,KACZG,WAAYA,EAAa,EACzBD,MAAOqB,EAAauC,EACpB1B,cAAetC,EAAMuC,OAEvBC,aAAaC,QAAQ,QAASC,KAAKC,UAAU,CAAEC,OAAQzC,O,qCAGzC,IAAD,EAC6CL,KAAKiB,MAAvDI,EADK,EACLA,eAA4Bf,EADvB,EACWqB,WAAmBpB,EAD9B,EAC8BA,WAE3C,GAAIc,EADS,EAEXrB,KAAKgD,SAAS,CACZ3B,eAAgBA,EAAiB,EACjCO,YAAY,EACZF,SAAS,EACTJ,MAAO,GACPG,YAAa,GACbD,UAAW,GACXK,YAAa,GACbC,OAAQ,KAEV9B,KAAKmC,gBACA,CAAC,IAAD,EACuDnC,KAAKC,MAAzDE,EADH,EACGA,QAASgE,EADZ,EACYA,MADZ,IACmBjE,MAASE,EAD5B,EAC4BA,KAAMqC,EADlC,EACkCA,MAAOpC,EADzC,EACyCA,QAC9C8D,EAAM,CAAE/D,OAAMqC,QAAOpC,UAASC,QAAOC,eC9K5B,YAAgD,IAAzBH,EAAwB,EAAxBA,KAAME,EAAkB,EAAlBA,MAAOD,EAAW,EAAXA,QAC3C+D,EAAU1B,aAAa2B,QAAQ,WACrC,GAAKD,EAOE,CACL,IAAME,EAAa1B,KAAK2B,MAAMH,GACxBI,EAAM,CACVpE,OACAE,QACAmE,QAASpE,GAEXiE,EAAWxD,KAAK0D,GAChB9B,aAAaC,QAAQ,UAAWC,KAAKC,UAAUyB,QAfnC,CACZ,IAAME,EAAM,CACVpE,OACAE,QACAmE,QAASpE,GAEXqC,aAAaC,QAAQ,UAAWC,KAAKC,UAAU,CAAC2B,MDuK9CE,CAAY,CAAEtE,OAAME,QAAOD,YAC3BF,EAAQW,KAAK,gB,sCAIA,IAAD,SACyDd,KAAKiB,MAApEG,EADM,EACNA,UAAWC,EADL,EACKA,eAAgBG,EADrB,EACqBA,UAAWC,EADhC,EACgCA,YAAaC,EAD7C,EAC6CA,QACrDiD,EAAO,sBAAOvD,EAAUC,GAAgBuD,mBAAjC,CACXxD,EAAUC,GAAgByC,iBAExBe,GADW,EAEf,OAAOF,EAAQG,OAAOC,KAAI,SAACjD,GACzB,OAAIA,IAAWV,EAAUC,GAAgByC,eAErC,4BACElD,KAAK,SACLH,cAAY,iBACZD,UAAS,UAAMiB,EAAN,kBACTZ,QAAU,EAAKqB,YACf8C,SAAWtD,GAETI,IAIR+C,GAAM,EAEJ,4BACErE,UAAS,UAAMgB,EAAN,kBACTZ,KAAK,SACLH,cAAA,uBAA8BoE,GAC9BI,IAAMJ,EACNhE,QAAU,EAAKqB,YACf8C,SAAWtD,GAETI,S,+BAMA,IAAD,EAC8B9B,KAAKC,MAAlCC,MAASE,EADV,EACUA,KAAMC,EADhB,EACgBA,QADhB,EAGuBL,KAAKiB,MAD3BM,EAFD,EAECA,QAASF,EAFV,EAEUA,eAAgBC,EAF1B,EAE0BA,MAAOM,EAFjC,EAEiCA,WACtCC,EAHK,EAGLA,YAAaF,EAHR,EAGQA,WACTuD,EAAQ,CACZlB,gBAAiBhE,KAAKuC,gBACtB4C,MAAM,GAAD,OAAK7D,EAAL,OANA,EASuBtB,KAAKiB,MAA3BG,EATD,EASCA,UAAWU,EATZ,EASYA,OACnB,OAAIP,GAAW6D,OAAOC,OAAOjE,GAAWkE,OAAS,EAE7C,yBAAK9E,UAAU,qBACb,yBACEE,IAAM6E,IACN5E,IAAI,cACJF,cAAY,yBACZD,UAAU,aAEZ,2BAAG,4CAKP,6BAASA,UAAU,gBACjB,yBAAKE,IAAM6E,IAAS5E,IAAI,cAAcH,UAAU,gBAChD,yBAAKA,UAAU,iBAAiB0E,MAAQrD,GACtC,gCACE,wBAAIpB,cAAY,qBAAqBD,UAAU,sBAA/C,YACSJ,EADT,QAIF,yBAAKI,UAAU,gCACb,yBAAKA,UAAU,2BACb,yBACEE,IAAG,0CAAsCL,GACzCM,IAAI,UACJF,cAAY,yBACZD,UAAU,kBAEZ,0BAAMC,cAAY,gBAAlB,iBAA6CkB,KAE/C,yBAAKnB,UAAU,QACb,8BACIc,GAEJ,yBACEd,UAAU,WACV0E,MAAQA,GAEN,OAIR,yBAAK1E,UAAU,yBACb,0BAAMC,cAAY,oBAAoBD,UAAU,qBAE5CY,EAAUC,GAAgBmE,UAG9B,0BAAM/E,cAAY,iBAAlB,UAEOW,EAAUC,GAAgBoE,UAE/B,0BAAMP,MAAQ,CAAEQ,WAAY,QACzB5D,IAGL,8BAEI9B,KAAKiC,iBAGT,4BACErB,KAAK,SACLH,cAAY,WACZD,UAAU,WACVmF,OAAS/D,EACTf,QAAUb,KAAKsC,cALjB,qB,GAvROvB,aAiTJC,eAVS,SAACC,GAAD,MAAY,CAClCf,MAAOe,EAAM2E,iBAGY,SAACC,GAAD,MAAe,CACxC1B,MAAO,gBEvSF,EFuSK/D,EAAH,EAAGA,KAAMqC,EAAT,EAASA,MAAOpC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,MAAOC,EAAhC,EAAgCA,WAAhC,OAAiDsF,EEtShD,CACNjF,KAhBU,QAiBVkF,QAAS,CACP1F,MAJC,EFwSM,CAAEA,OAAMqC,QAAOpC,UAASC,QAAOC,eExSjBH,KAKrBqC,MALgE,EAArCA,MAM3BpC,QANgE,EAA9BA,QAOlCC,MAPgE,EAArBA,MAQ3CC,WARgE,EAAdA,kBF4SzCS,CAA6CG,G,yBG/StD4E,G,mBACJ,aAAe,IAAD,8BACZ,+CACK9E,MAAQ,CACXb,KAAM,GACNqC,MAAO,GACPf,SAAS,EACTrB,QAAS,IAGX,EAAK2F,aAAe,EAAKA,aAAahE,KAAlB,gBACpB,EAAKiE,UAAY,EAAKA,UAAUjE,KAAf,gBACjB,EAAKkE,WAAa,EAAKA,WAAWlE,KAAhB,gBAXN,E,0EAcA,IAAD,EACahC,KAAKiB,MAArBwB,EADG,EACHA,MAGW,CAJR,EACIrC,KAIRkF,OAFe,GAGnB7C,EAAM0D,SAAS,KAChB1D,EAAM2D,MAAM,KAAKd,OAAS,GACzB7C,EAAM0D,SAAS,QAChB1D,EAAM0D,SAAS,MAAQ1D,EAAM2D,MAAM,KAAK,GAAGd,OAPxB,EAQnB7C,EAAM0D,SAAS,MAAQ1D,EAAM2D,MAAM,KAAKd,OAAS,GAElBe,OAAM,SAACC,GAAD,OAAqB,IAAVA,KAGhDtG,KAAKgD,SAAS,CAAEtB,SAAS,IAEzB1B,KAAKgD,SAAS,CAAEtB,SAAS,M,sCAIH,IAGI,EAKrB,EARMiC,EAAU,EAAVA,OACL4C,EAAc5C,EAAd4C,MAAO1B,EAAOlB,EAAPkB,GADQ,EAEC7E,KAAKiB,MAArBb,EAFe,EAEfA,KAAMqC,EAFS,EAETA,MACVrC,GAAQqC,GAAS8D,EACnBvG,KAAKgD,UAAL,mBACG6B,EAAK0B,GADR,wBAEWC,IAAI/D,GAAOgE,YAFtB,IAKAzG,KAAKgD,UAAL,mBACG6B,EAAK0B,GADR,yBAEW,GAFX,wBAGWC,IAAI/D,GAAOgE,YAHtB,M,sJASqBpD,MAAM,sD,cAAvBC,E,0BACcA,EAASC,Q,OAAvBL,E,OACAwD,EAAcxD,EAAMA,MAE1BR,aAAaC,QAAQ,QAAS+D,G,EAEG1G,KAAKiB,MAA9Bb,E,EAAAA,KAAMqC,E,EAAAA,MAAOpC,E,EAAAA,Q,EACmBL,KAAKC,MAA9B0G,E,EAAPC,MAAoBzG,E,EAAAA,QAC5BwG,EAAYvG,EAAMqC,EAAOpC,EAASqG,GAElCvG,EAAQW,KAAK,S,iFAGL,IAAD,EAC0Bd,KAAKiB,MAA9Bb,EADD,EACCA,KAAMqC,EADP,EACOA,MAAOf,EADd,EACcA,QACrB,OACE,6BAASlB,UAAU,iBACjB,yBAAKE,IAAM6E,IAAS5E,IAAI,cAAcH,UAAU,gBAChD,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,0BACb,2BACEqG,aAAa,MACbhC,GAAG,OACHpE,cAAY,oBACZG,KAAK,OACLkG,SAAW9G,KAAKgG,aAChBe,YAAY,OACZR,MAAQnG,EACR4G,QAAUhH,KAAKkG,WACf1F,UAAU,gBAEZ,4BACEC,cAAY,WACZG,KAAK,SACLoE,SAAWtD,EACXb,QAAUb,KAAKiG,UACfzF,UAAYkB,EAAU,eAAiB,qBALzC,SASA,2BACEmD,GAAG,QACHpE,cAAY,uBACZG,KAAK,OACLkG,SAAW9G,KAAKgG,aAChBe,YAAY,SACZR,MAAQ9D,EACRjC,UAAU,cACVwG,QAAUhH,KAAKkG,cAInB,kBAAC,IAAD,CACEe,GAAG,iBACHxG,cAAY,eACZD,UAAU,kBAHZ,aAQF,0BAAMA,UAAU,UAAhB,6B,GAlHcO,cA4HPC,cAAQ,MAJI,SAAC6E,GAAD,MAAe,CACxCe,MAAO,SAACxG,EAAMqC,EAAOpC,EAAS6C,GAAvB,OAAiC2C,EDlI3B,SAAezF,EAAMqC,EAAOpC,EAAS6C,GAClD,MAAQ,CACNtC,KALU,QAMVkF,QAAS,CACP1F,OACAqC,QACApC,UACA6C,UC2H6C0D,CAAMxG,EAAMqC,EAAOpC,EAAS6C,QAGhElC,CAAkC+E,GCpI5BmB,G,wLAEjB,IAAM9C,EAAUxB,KAAK2B,MAAM7B,aAAa2B,QAAQ,YAEhDD,EAAQU,MAAK,SAACqC,EAAGC,GACf,OAAID,EAAE7G,MAAQ8G,EAAE9G,MAAc,EACvB6G,EAAE7G,MAAQ8G,EAAE9G,OAHT,EAGuB,KAEnC+G,QAAQC,IAAIlD,GAPL,IAQCjE,EAAYH,KAAKC,MAAjBE,QACR,OACE,6BAASK,UAAU,mBACjB,yBAAKA,UAAU,qBACb,uBAAGC,cAAY,iBAAf,WACA,yBACEC,IAAG,0CAAsC0D,EAAQ,GAAGK,SACpD9D,IAAI,WACJF,cAAY,yBACZD,UAAU,kBAIV4D,EAAQW,KAAI,SAACjC,EAAQyE,GAAT,OACV,yBAAK/G,UAAU,eAAeyE,IAAMsC,GAClC,uBAAG/G,UAAU,cAAcC,cAAA,sBAA6B8G,IAAxD,UAAsEA,EAAQ,EAA9E,aAAoFzE,EAAO1C,OAC3F,uBAAGI,UAAU,eAAeC,cAAA,uBAA8B8G,IAAWzE,EAAOxC,WAIlF,4BACEG,cAAY,cACZD,UAAU,cACVI,KAAK,SACLC,QAAU,kBAAMV,EAAQW,KAAK,OAJ/B,gB,GA7B2BC,cCDhByG,G,wLAEjB,OACE,6BAAShH,UAAU,oBACjB,wBAAIC,cAAY,kBAAhB,iB,GAJ8BM,cCSlB0G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCjBOC,EAAgB,CAC3B1H,KAAM,GACNqC,MAAO,GACPpC,QAAS,IAoBIuF,MAjBf,WAAsD,IAAhC3E,EAA+B,uDAAvB6G,EAAeC,EAAQ,uCAC3CnH,EAAkBmH,EAAlBnH,KAAMkF,EAAYiC,EAAZjC,QACd,OAAQlF,GACR,IAVY,QAWV,OAAO,eACFK,EADL,CAEEb,KAAM0F,EAAQ1F,KACdqC,MAAOqD,EAAQrD,MACfpC,QAASyF,EAAQzF,QACjB6C,MAAO4C,EAAQ5C,QAGnB,QACE,OAAOjC,IClBE6G,EAAgB,CAC3B1H,KAAM,GACNqC,MAAO,GACPpC,QAAS,GACTC,MAAO,EACPC,WAAY,GAoBCW,MAjBf,WAAsD,IAAhCD,EAA+B,uDAAvB6G,EAAeC,EAAQ,uCAC3CnH,EAAkBmH,EAAlBnH,KAAMkF,EAAYiC,EAAZjC,QACd,OAAQlF,GACR,IAbY,QAcV,OAAO,eACFK,EADL,CAEEb,KAAM0F,EAAQ1F,KACdqC,MAAOqD,EAAQrD,MACfpC,QAASyF,EAAQzF,QACjBC,MAAOwF,EAAQxF,MACfC,WAAYuF,EAAQvF,aAExB,QACE,OAAOU,ICdI+G,EALKC,0BAAgB,CAClCrC,eACA1E,iBCFIgH,EAAQC,sBACZH,EACAI,iCAGEV,OAAOW,UACTX,OAAOQ,MAAQA,GAGFA,QCLfI,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAQA,GAChB,mBCFW,WACb,OACE,kBAAC,IAAD,CACEM,SAAS,gBAET,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAY5C,IAClC,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,iBAAiBC,UAAYnB,IAC/C,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,QAAQC,UAAYxH,IACtC,kBAAC,IAAD,CAAOsH,OAAK,EAACC,KAAK,YAAYC,UAAY5I,IAC1C,kBAAC,IAAD,CAAO0I,OAAK,EAACC,KAAK,WAAWC,UAAYzB,QDR7C,OAEF0B,SAASC,eAAe,SLuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBOrInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.15c11357.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Feedback.css';\n\nclass Feedback extends Component {\n  render() {\n    const { dados, history } = this.props;\n    const { name, profile, score, assertions } = dados;\n    return (\n      <section className=\"feedback-section\">\n        <div className=\"feedback-container\">\n          <header>\n            <span data-testid=\"feedback-text\">Feedback</span>\n            <p data-testid=\"header-player-name\">{ name }</p>\n            <p data-testid=\"header-score\">{ score }</p>\n            <p data-testid=\"feedback-total-score\">{ score }</p>\n            <p data-testid=\"feedback-total-question\">{ assertions }</p>\n            <img\n              src={ `https://www.gravatar.com/avatar/${profile}` }\n              alt=\"gravatar\"\n              data-testid=\"header-profile-picture\"\n              className=\"profile-image\"\n            />\n            {\n              assertions > 2\n                ? <p data-testid=\"feedback-text\">Mandou bem!</p>\n                : <p data-testid=\"feedback-text\">Podia ser melhor...</p>\n            }\n          </header>\n          <button\n            type=\"button\"\n            data-testid=\"btn-play-again\"\n            className=\"btn-play-again\"\n            onClick={ () => history.push('/') }\n          >\n            Jogar novamente\n          </button>\n          <button\n            type=\"button\"\n            data-testid=\"btn-ranking\"\n            className=\"btn-ranking\"\n            onClick={ () => history.push('/ranking') }\n          >\n            Ver Ranking\n          </button>\n        </div>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  dados: state.scoreReducer,\n});\n\nexport default connect(mapStateToProps, null)(Feedback);\n\nFeedback.propTypes = {\n  dados: PropTypes.objectOf(PropTypes.string).isRequired,\n  history: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n","/* eslint-disable max-lines */\n/* eslint-disable max-lines-per-function */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setScore } from '../../actions';\nimport './index.css';\nimport localHelper from './helper';\nimport trivia from '../../trivia.png';\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: {},\n      questionNumber: 0,\n      timer: 30,\n      loading: true,\n      redBorder: '',\n      greenBorder: '',\n      disable: false,\n      totalScore: 0,\n      assertions: 0,\n      showButton: true,\n      answerStyle: {},\n      answer: '',\n    };\n    this.fetchQuestions = this.fetchQuestions.bind(this);\n    this.renderAnswers = this.renderAnswers.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.stopWatch = this.stopWatch.bind(this);\n    this.switchValue = this.switchValue.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.switchTimeBar = this.switchTimeBar.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchQuestions();\n    this.stopWatch();\n    const { dados } = this.props;\n    const { assertions } = this.state;\n    const profile = {\n      name: dados.name,\n      assertions,\n      score: 0,\n      gravatarEmail: dados.email,\n    };\n    localStorage.setItem('state', JSON.stringify({ player: profile }));\n  }\n\n  stopWatch() {\n    const segundo = 1000;\n    this.timer = setInterval(() => {\n      const { timer } = this.state;\n      this.setState({\n        timer: timer - 1,\n      });\n      if (timer === 1) {\n        clearInterval(this.timer);\n        this.setState({\n          disable: true,\n          showButton: false,\n        });\n      }\n    }, segundo);\n  }\n\n  async fetchQuestions() {\n    const { dados: { token } } = this.props;\n    const defaultToken = token === undefined\n      ? 'a2abf8fd177c66dab22a9d4091789330a889e39e6d2e04dc2bb1fb0ec2c20198' : token;\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${defaultToken}`);\n    const data = await response.json();\n    this.setState({\n      questions: data.results,\n      loading: false,\n    });\n  }\n\n  switchValue(difficuty) {\n    const hardPoints = 3;\n    switch (difficuty) {\n    case 'easy':\n      return 1;\n    case 'medium':\n      return 2;\n    case 'hard':\n      return hardPoints;\n    default:\n      return 0;\n    }\n  }\n\n  switchTimeBar() {\n    const { timer } = this.state;\n    if (timer < 20 && timer > 10) return 'yellow';\n    if (timer < 10) return 'red';\n    return '#4466F2';\n  }\n\n  stopTimer() {\n    this.setState({\n      greenBorder: 'green-border',\n      redBorder: 'red-border',\n    });\n    clearInterval(this.timer);\n  }\n\n  handleClick({ target }) {\n    this.stopTimer();\n    const { questions, questionNumber, timer, totalScore, assertions } = this.state;\n    const { difficulty } = questions[questionNumber];\n    const { dados } = this.props;\n    if (target.textContent !== questions[questionNumber].correct_answer) {\n      const profile = {\n        name: dados.name,\n        assertions,\n        score: totalScore,\n        gravatarEmail: dados.email,\n      };\n      localStorage.setItem('state', JSON.stringify({ player: profile }));\n      this.setState({\n        disable: true,\n        showButton: false,\n        answer: questions[questionNumber].correct_answer,\n        answerStyle: {\n          backdropFilter: 'blur(0)',\n          backgroundColor: '',\n          border: '2px solid red',\n        },\n      });\n      return;\n    }\n    const ten = 10;\n    const total = ten + (timer * this.switchValue(difficulty));\n    this.setState({\n      disable: true,\n      totalScore: totalScore + total,\n      assertions: assertions + 1,\n      showButton: false,\n      answer: questions[questionNumber].correct_answer,\n      answerStyle: {\n        backdropFilter: 'blur(0)',\n        backgroundColor: '',\n        border: '2px solid green',\n      },\n    });\n    const profile = {\n      name: dados.name,\n      assertions: assertions + 1,\n      score: totalScore + total,\n      gravatarEmail: dados.email,\n    };\n    localStorage.setItem('state', JSON.stringify({ player: profile }));\n  }\n\n  nextQuestion() {\n    const { questionNumber, totalScore: score, assertions } = this.state;\n    const four = 4;\n    if (questionNumber < four) {\n      this.setState({\n        questionNumber: questionNumber + 1,\n        showButton: true,\n        disable: false,\n        timer: 30,\n        greenBorder: '',\n        redBorder: '',\n        answerStyle: {},\n        answer: '',\n      });\n      this.stopWatch();\n    } else {\n      const { history, Score, dados: { name, email, profile } } = this.props;\n      Score({ name, email, profile, score, assertions });\n      localHelper({ name, score, profile });\n      history.push('/feedback');\n    }\n  }\n\n  renderAnswers() {\n    const { questions, questionNumber, redBorder, greenBorder, disable } = this.state; // Testando o git hub\n    const answers = [...questions[questionNumber].incorrect_answers,\n      questions[questionNumber].correct_answer];\n    const index = -1;\n    let id = index; // Key do map\n    return answers.sort().map((answer) => {\n      if (answer === questions[questionNumber].correct_answer) {\n        return (\n          <button\n            type=\"button\"\n            data-testid=\"correct-answer\"\n            className={ `${greenBorder} answer-option` }\n            onClick={ this.handleClick }\n            disabled={ disable }\n          >\n            { answer }\n          </button>\n        );\n      }\n      id += 1;\n      return (\n        <button\n          className={ `${redBorder} answer-option` }\n          type=\"button\"\n          data-testid={ `wrong-answer-${id}` }\n          key={ id }\n          onClick={ this.handleClick }\n          disabled={ disable }\n        >\n          { answer }\n        </button>\n      );\n    });\n  }\n\n  render() {\n    const { dados: { name, profile } } = this.props;\n    const { loading, questionNumber, timer, showButton,\n      answerStyle, totalScore } = this.state;\n    const style = {\n      backgroundColor: this.switchTimeBar(),\n      width: `${timer}vw`,\n    };\n\n    const { questions, answer } = this.state;\n    if (loading || Object.values(questions).length < 1) {\n      return (\n        <div className=\"loading-container\">\n          <img\n            src={ trivia }\n            alt=\"trivia logo\"\n            data-testid=\"header-profile-picture\"\n            className=\"App-logo\"\n          />\n          <i><h1>Loading...</h1></i>\n        </div>\n      );\n    }\n    return (\n      <section className=\"game-section\">\n        <img src={ trivia } alt=\"trivia logo\" className=\"trivia-logo\" />\n        <div className=\"game-container\" style={ answerStyle }>\n          <header>\n            <h1 data-testid=\"header-player-name\" className=\"header-player-name\">\n              { `~ ${name} ~` }\n            </h1>\n          </header>\n          <div className=\"profile-score-time-container\">\n            <div className=\"profile-score-container\">\n              <img\n                src={ `https://www.gravatar.com/avatar/${profile}` }\n                alt=\"profile\"\n                data-testid=\"header-profile-picture\"\n                className=\"profile-image\"\n              />\n              <span data-testid=\"header-score\">{ `Score: ${totalScore}` }</span>\n            </div>\n            <div className=\"time\">\n              <span>\n                { timer }\n              </span>\n              <div\n                className=\"time-bar\"\n                style={ style }\n              >\n                { ' ' }\n              </div>\n            </div>\n          </div>\n          <div className=\"questions-and-answers\">\n            <span data-testid=\"question-category\" className=\"question-category\">\n              {\n                questions[questionNumber].category\n              }\n            </span>\n            <span data-testid=\"question-text\">\n              {\n                `${questions[questionNumber].question}`\n              }\n              <span style={ { fontWeight: '700' } }>\n                {answer}\n              </span>\n            </span>\n            <span>\n              {\n                this.renderAnswers() // teste do git\n              }\n            </span>\n            <button\n              type=\"button\"\n              data-testid=\"btn-next\"\n              className=\"btn-next\"\n              hidden={ showButton }\n              onClick={ this.nextQuestion }\n            >\n              Próxima\n            </button>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  dados: state.loginReducer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  Score: ({ name, email, profile, score, assertions }) => dispatch(\n    setScore({ name, email, profile, score, assertions }),\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n\nGame.propTypes = {\n  dados: PropTypes.objectOf(PropTypes.string).isRequired,\n  history: PropTypes.objectOf(PropTypes.string).isRequired,\n  Score: PropTypes.func.isRequired,\n};\n","export default function localHelper({ name, score, profile }) {\n  const ranking = localStorage.getItem('ranking');\n  if (!ranking) {\n    const obj = {\n      name,\n      score,\n      picture: profile,\n    };\n    localStorage.setItem('ranking', JSON.stringify([obj]));\n  } else {\n    const rankingObj = JSON.parse(ranking);\n    const obj = {\n      name,\n      score,\n      picture: profile,\n    };\n    rankingObj.push(obj);\n    localStorage.setItem('ranking', JSON.stringify(rankingObj));\n  }\n}\n","const LOGIN = 'LOGIN';\nconst SCORE = 'SCORE';\n\nexport default function Login(name, email, profile, token) {\n  return ({\n    type: LOGIN,\n    payload: {\n      name,\n      email,\n      profile,\n      token,\n    },\n  });\n}\n\nexport function setScore({ name, email, profile, score, assertions }) {\n  return ({\n    type: SCORE,\n    payload: {\n      name,\n      email,\n      profile,\n      score,\n      assertions,\n    },\n  });\n}\n","/* eslint-disable max-lines-per-function */\nimport React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport md5 from 'crypto-js/md5';\nimport '../../Style/Initial.css';\nimport PropTypes from 'prop-types';\nimport trivia from '../../trivia.png';\n\nimport Login from '../../actions';\n\nclass Initial extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      disable: true,\n      profile: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.sendLogin = this.sendLogin.bind(this);\n    this.validLogin = this.validLogin.bind(this);\n  }\n\n  validLogin() {\n    const { email, name } = this.state;\n    const dotComLength = 3;\n    const nameMinLength = 4;\n    const errorCases = [\n      name.length < nameMinLength,\n      !email.includes('@'),\n      email.split('@').length > 2,\n      !email.includes('.com'),\n      email.includes('.') && email.split('.')[1].length > dotComLength,\n      email.includes('.') && email.split('.').length > 2,\n    ];\n    const filledCorrect = errorCases.every((error) => error === false);\n\n    if (filledCorrect) {\n      this.setState({ disable: false });\n    } else {\n      this.setState({ disable: true });\n    }\n  }\n\n  handleChange({ target }) {\n    const { value, id } = target;\n    const { name, email } = this.state;\n    if (name && email && value) {\n      this.setState({\n        [id]: value,\n        profile: md5(email).toString(),\n      });\n    } else {\n      this.setState({\n        [id]: value,\n        disable: true,\n        profile: md5(email).toString(),\n      });\n    }\n  }\n\n  async sendLogin() {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const token = await response.json();\n    const stringToken = token.token;\n\n    localStorage.setItem('token', stringToken);\n\n    const { name, email, profile } = this.state;\n    const { Login: LoginAction, history } = this.props;\n    LoginAction(name, email, profile, stringToken);\n\n    history.push('/jogo');\n  }\n\n  render() {\n    const { name, email, disable } = this.state;\n    return (\n      <section className=\"login-section\">\n        <img src={ trivia } alt=\"trivia logo\" className=\"trivia-logo\" />\n        <div className=\"login-container\">\n          <div className=\"login-inputs-container\">\n            <input\n              autoComplete=\"off\"\n              id=\"name\"\n              data-testid=\"input-player-name\"\n              type=\"text\"\n              onChange={ this.handleChange }\n              placeholder=\"Name\"\n              value={ name }\n              onKeyUp={ this.validLogin }\n              className=\"login-input\"\n            />\n            <button\n              data-testid=\"btn-play\"\n              type=\"button\"\n              disabled={ disable }\n              onClick={ this.sendLogin }\n              className={ disable ? 'login-button' : 'login-button able' }\n            >\n              Jogar\n            </button>\n            <input\n              id=\"email\"\n              data-testid=\"input-gravatar-email\"\n              type=\"text\"\n              onChange={ this.handleChange }\n              placeholder=\"E-mail\"\n              value={ email }\n              className=\"login-input\"\n              onKeyUp={ this.validLogin }\n            />\n\n          </div>\n          <Link\n            to=\"/configuracoes\"\n            data-testid=\"btn-settings\"\n            className=\"login-settings\"\n          >\n            Settings\n          </Link>\n        </div>\n        <span className=\"dev-by\">&copy; Guilherme Viana</span>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  Login: (name, email, profile, token) => dispatch(Login(name, email, profile, token)),\n});\n\nexport default connect(null, mapDispatchToProps)(Initial);\n\nInitial.propTypes = {\n  Login: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Ranking.css';\n\nexport default class Ranking extends Component {\n  render() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const one = -1;\n    ranking.sort((a, b) => {\n      if (a.score < b.score) return 1;\n      return a.score > b.score ? one : 0;\n    });\n    console.log(ranking);\n    const { history } = this.props;\n    return (\n      <section className=\"ranking-section\">\n        <div className=\"ranking-container\">\n          <p data-testid=\"ranking-title\">Ranking</p>\n          <img\n            src={ `https://www.gravatar.com/avatar/${ranking[0].picture}` }\n            alt=\"gravatar\"\n            data-testid=\"header-profile-picture\"\n            className=\"profile-image\"\n\n          />\n          {\n            ranking.map((player, index) => (\n              <div className=\"player-infos\" key={ index }>\n                <p className=\"player-name\" data-testid={ `player-name-${index}` }>{`${index + 1}. ${player.name}`}</p>\n                <p className=\"player-score\" data-testid={ `player-score-${index}` }>{player.score}</p>\n              </div>\n            ))\n          }\n          <button\n            data-testid=\"btn-go-home\"\n            className=\"btn-go-home\"\n            type=\"button\"\n            onClick={ () => history.push('/') }\n          >\n            voltar\n          </button>\n        </div>\n      </section>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n","import React, { Component } from 'react';\nimport './Settings.css';\n\nexport default class Settings extends Component {\n  render() {\n    return (\n      <section className=\"settings-section\">\n        <h1 data-testid=\"settings-title\">Settings</h1>\n      </section>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const LOGIN = 'LOGIN';\nexport const INITIAL_STATE = {\n  name: '',\n  email: '',\n  profile: '',\n};\n\nfunction loginReducer(state = INITIAL_STATE, action) {\n  const { type, payload } = action;\n  switch (type) {\n  case LOGIN:\n    return {\n      ...state,\n      name: payload.name,\n      email: payload.email,\n      profile: payload.profile,\n      token: payload.token,\n    };\n\n  default:\n    return state;\n  }\n}\n\nexport default loginReducer;\n","const SCORE = 'SCORE';\n\nexport const INITIAL_STATE = {\n  name: '',\n  email: '',\n  profile: '',\n  score: 0,\n  assertions: 0,\n};\n\nfunction scoreReducer(state = INITIAL_STATE, action) {\n  const { type, payload } = action;\n  switch (type) {\n  case SCORE:\n    return {\n      ...state,\n      name: payload.name,\n      email: payload.email,\n      profile: payload.profile,\n      score: payload.score,\n      assertions: payload.assertions,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default scoreReducer;\n","import { combineReducers } from 'redux';\nimport loginReducer from './login';\nimport scoreReducer from './score';\n\nconst rootReducer = combineReducers({\n  loginReducer,\n  scoreReducer,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducer';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Feedback from './Pages/Feedback';\nimport Game from './Pages/Game';\nimport Initial from './Pages/Initial';\nimport Ranking from './Pages/Ranking';\nimport Settings from './Pages/Settings';\n\nexport default function App() {\n  return (\n    <BrowserRouter\n      basename=\"/trivia-game\"\n    >\n      <Switch>\n        <Route exact path=\"/\" component={ Initial } />\n        <Route exact path=\"/configuracoes\" component={ Settings } />\n        <Route exact path=\"/jogo\" component={ Game } />\n        <Route exact path=\"/feedback\" component={ Feedback } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";"],"sourceRoot":""}